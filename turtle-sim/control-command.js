"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.ControlCommand = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var ControlCommand = /** @class */ (function () {
    function ControlCommand() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ControlCommand.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ControlCommand.getRootAsControlCommand = function (bb, obj) {
        return (obj || new ControlCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ControlCommand.getSizePrefixedRootAsControlCommand = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ControlCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ControlCommand.prototype.linearVelocity = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    ControlCommand.prototype.angularVelocity = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    ControlCommand.startControlCommand = function (builder) {
        builder.startObject(2);
    };
    ControlCommand.addLinearVelocity = function (builder, linearVelocity) {
        builder.addFieldFloat32(0, linearVelocity, 0.0);
    };
    ControlCommand.addAngularVelocity = function (builder, angularVelocity) {
        builder.addFieldFloat32(1, angularVelocity, 0.0);
    };
    ControlCommand.endControlCommand = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ControlCommand.finishControlCommandBuffer = function (builder, offset) {
        builder.finish(offset);
    };
    ControlCommand.finishSizePrefixedControlCommandBuffer = function (builder, offset) {
        builder.finish(offset, undefined, true);
    };
    ControlCommand.createControlCommand = function (builder, linearVelocity, angularVelocity) {
        ControlCommand.startControlCommand(builder);
        ControlCommand.addLinearVelocity(builder, linearVelocity);
        ControlCommand.addAngularVelocity(builder, angularVelocity);
        return ControlCommand.endControlCommand(builder);
    };
    return ControlCommand;
}());
exports.ControlCommand = ControlCommand;

// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TURTLESIM_TURTLESIM_H_
#define FLATBUFFERS_GENERATED_TURTLESIM_TURTLESIM_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace TurtleSim {

struct ControlCommand;
struct ControlCommandBuilder;

struct TurtleStatus;
struct TurtleStatusBuilder;

struct ControlCommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ControlCommandBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LINEAR_VELOCITY = 4,
    VT_ANGULAR_VELOCITY = 6
  };
  float linear_velocity() const {
    return GetField<float>(VT_LINEAR_VELOCITY, 0.0f);
  }
  float angular_velocity() const {
    return GetField<float>(VT_ANGULAR_VELOCITY, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_LINEAR_VELOCITY, 4) &&
           VerifyField<float>(verifier, VT_ANGULAR_VELOCITY, 4) &&
           verifier.EndTable();
  }
};

struct ControlCommandBuilder {
  typedef ControlCommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_linear_velocity(float linear_velocity) {
    fbb_.AddElement<float>(ControlCommand::VT_LINEAR_VELOCITY, linear_velocity, 0.0f);
  }
  void add_angular_velocity(float angular_velocity) {
    fbb_.AddElement<float>(ControlCommand::VT_ANGULAR_VELOCITY, angular_velocity, 0.0f);
  }
  explicit ControlCommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ControlCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ControlCommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ControlCommand> CreateControlCommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float linear_velocity = 0.0f,
    float angular_velocity = 0.0f) {
  ControlCommandBuilder builder_(_fbb);
  builder_.add_angular_velocity(angular_velocity);
  builder_.add_linear_velocity(linear_velocity);
  return builder_.Finish();
}

struct TurtleStatus FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TurtleStatusBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_THETA = 8
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float theta() const {
    return GetField<float>(VT_THETA, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           VerifyField<float>(verifier, VT_THETA, 4) &&
           verifier.EndTable();
  }
};

struct TurtleStatusBuilder {
  typedef TurtleStatus Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(TurtleStatus::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(TurtleStatus::VT_Y, y, 0.0f);
  }
  void add_theta(float theta) {
    fbb_.AddElement<float>(TurtleStatus::VT_THETA, theta, 0.0f);
  }
  explicit TurtleStatusBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TurtleStatus> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TurtleStatus>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TurtleStatus> CreateTurtleStatus(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float theta = 0.0f) {
  TurtleStatusBuilder builder_(_fbb);
  builder_.add_theta(theta);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline const TurtleSim::ControlCommand *GetControlCommand(const void *buf) {
  return ::flatbuffers::GetRoot<TurtleSim::ControlCommand>(buf);
}

inline const TurtleSim::ControlCommand *GetSizePrefixedControlCommand(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<TurtleSim::ControlCommand>(buf);
}

inline bool VerifyControlCommandBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<TurtleSim::ControlCommand>(nullptr);
}

inline bool VerifySizePrefixedControlCommandBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<TurtleSim::ControlCommand>(nullptr);
}

inline void FinishControlCommandBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TurtleSim::ControlCommand> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedControlCommandBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TurtleSim::ControlCommand> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace TurtleSim

#endif  // FLATBUFFERS_GENERATED_TURTLESIM_TURTLESIM_H_

"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurtleStatus = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var TurtleStatus = /** @class */ (function () {
    function TurtleStatus() {
        this.bb = null;
        this.bb_pos = 0;
    }
    TurtleStatus.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    TurtleStatus.getRootAsTurtleStatus = function (bb, obj) {
        return (obj || new TurtleStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    TurtleStatus.getSizePrefixedRootAsTurtleStatus = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TurtleStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    TurtleStatus.prototype.x = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    TurtleStatus.prototype.y = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    TurtleStatus.prototype.theta = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    TurtleStatus.startTurtleStatus = function (builder) {
        builder.startObject(3);
    };
    TurtleStatus.addX = function (builder, x) {
        builder.addFieldFloat32(0, x, 0.0);
    };
    TurtleStatus.addY = function (builder, y) {
        builder.addFieldFloat32(1, y, 0.0);
    };
    TurtleStatus.addTheta = function (builder, theta) {
        builder.addFieldFloat32(2, theta, 0.0);
    };
    TurtleStatus.endTurtleStatus = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    TurtleStatus.createTurtleStatus = function (builder, x, y, theta) {
        TurtleStatus.startTurtleStatus(builder);
        TurtleStatus.addX(builder, x);
        TurtleStatus.addY(builder, y);
        TurtleStatus.addTheta(builder, theta);
        return TurtleStatus.endTurtleStatus(builder);
    };
    return TurtleStatus;
}());
exports.TurtleStatus = TurtleStatus;

"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.Monster = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var Monster = /** @class */ (function () {
    function Monster() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Monster.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Monster.getRootAsMonster = function (bb, obj) {
        return (obj || new Monster()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Monster.getSizePrefixedRootAsMonster = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Monster()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Monster.prototype.id = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Monster.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    Monster.prototype.hp = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Monster.startMonster = function (builder) {
        builder.startObject(3);
    };
    Monster.addId = function (builder, id) {
        builder.addFieldInt32(0, id, 0);
    };
    Monster.addName = function (builder, nameOffset) {
        builder.addFieldOffset(1, nameOffset, 0);
    };
    Monster.addHp = function (builder, hp) {
        builder.addFieldInt32(2, hp, 0);
    };
    Monster.endMonster = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Monster.createMonster = function (builder, id, nameOffset, hp) {
        Monster.startMonster(builder);
        Monster.addId(builder, id);
        Monster.addName(builder, nameOffset);
        Monster.addHp(builder, hp);
        return Monster.endMonster(builder);
    };
    return Monster;
}());
exports.Monster = Monster;
